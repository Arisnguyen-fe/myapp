{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action_type",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "created_at",
          "type": "uint256"
        }
      ],
      "name": "ActionLogged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action_type",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "created_at",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "treatment",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "referral",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "research",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct LogAudits.Consent",
          "name": "granted_consent",
          "type": "tuple"
        }
      ],
      "name": "PatientLogged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_role",
          "type": "string"
        }
      ],
      "name": "addDiagnosis",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_role",
          "type": "string"
        }
      ],
      "name": "assignTest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_role",
          "type": "string"
        }
      ],
      "name": "referToDoctor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_treatmentConsent",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_referralConsent",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_researchConsent",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_role",
          "type": "string"
        }
      ],
      "name": "submitSymptom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_role",
          "type": "string"
        }
      ],
      "name": "updateTestResults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/LogAudits.sol"
  },
  "ast": {
    "absolutePath": "contracts/LogAudits.sol",
    "exportedSymbols": {
      "LogAudits": [
        137
      ]
    },
    "id": 138,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "LogAudits",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 137,
        "linearizedBaseContracts": [
          137
        ],
        "name": "LogAudits",
        "nameLocation": "66:9:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "LogAudits.Consent",
            "id": 8,
            "members": [
              {
                "constant": false,
                "id": 3,
                "mutability": "mutable",
                "name": "treatment",
                "nameLocation": "161:9:0",
                "nodeType": "VariableDeclaration",
                "scope": 8,
                "src": "156:14:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 2,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "156:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5,
                "mutability": "mutable",
                "name": "referral",
                "nameLocation": "185:8:0",
                "nodeType": "VariableDeclaration",
                "scope": 8,
                "src": "180:13:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 4,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "180:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 7,
                "mutability": "mutable",
                "name": "research",
                "nameLocation": "208:8:0",
                "nodeType": "VariableDeclaration",
                "scope": 8,
                "src": "203:13:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 6,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "203:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Consent",
            "nameLocation": "138:7:0",
            "nodeType": "StructDefinition",
            "scope": 137,
            "src": "131:92:0",
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 13,
            "mutability": "mutable",
            "name": "userConsent",
            "nameLocation": "326:11:0",
            "nodeType": "VariableDeclaration",
            "scope": 137,
            "src": "290:47:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Consent_$8_storage_$",
              "typeString": "mapping(address => struct LogAudits.Consent)"
            },
            "typeName": {
              "id": 12,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 9,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "298:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "290:27:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Consent_$8_storage_$",
                "typeString": "mapping(address => struct LogAudits.Consent)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 11,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 10,
                  "name": "Consent",
                  "nameLocations": [
                    "309:7:0"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8,
                  "src": "309:7:0"
                },
                "referencedDeclaration": 8,
                "src": "309:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Consent_$8_storage_ptr",
                  "typeString": "struct LogAudits.Consent"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 17,
            "mutability": "mutable",
            "name": "authorizedProviders",
            "nameLocation": "465:19:0",
            "nodeType": "VariableDeclaration",
            "scope": 137,
            "src": "432:52:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 16,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 14,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "440:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "432:24:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 15,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "451:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "private"
          },
          {
            "anonymous": false,
            "eventSelector": "baf4064c4bce11ab1664ab198d1f4c3902389a7fe4a40279db2d522716fb729b",
            "id": 30,
            "name": "PatientLogged",
            "nameLocation": "538:13:0",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 29,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "577:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 30,
                  "src": "561:20:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "561:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 21,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "role",
                  "nameLocation": "643:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 30,
                  "src": "636:11:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 20,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "636:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "action_type",
                  "nameLocation": "739:11:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 30,
                  "src": "732:18:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 22,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "732:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "created_at",
                  "nameLocation": "841:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 30,
                  "src": "833:18:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 24,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "833:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "granted_consent",
                  "nameLocation": "909:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 30,
                  "src": "901:23:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Consent_$8_memory_ptr",
                    "typeString": "struct LogAudits.Consent"
                  },
                  "typeName": {
                    "id": 27,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 26,
                      "name": "Consent",
                      "nameLocations": [
                        "901:7:0"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 8,
                      "src": "901:7:0"
                    },
                    "referencedDeclaration": 8,
                    "src": "901:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Consent_$8_storage_ptr",
                      "typeString": "struct LogAudits.Consent"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "551:444:0"
            },
            "src": "532:464:0"
          },
          {
            "anonymous": false,
            "eventSelector": "5b56e6ffbe95b7f92c787b65102287621b8b2f70e10bdf8c52f38ba60adaadfe",
            "id": 40,
            "name": "ActionLogged",
            "nameLocation": "1008:12:0",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 39,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 32,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "user",
                  "nameLocation": "1046:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 40,
                  "src": "1030:20:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 31,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1030:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 34,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "role",
                  "nameLocation": "1112:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 40,
                  "src": "1105:11:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 33,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1105:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 36,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "action_type",
                  "nameLocation": "1208:11:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 40,
                  "src": "1201:18:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 35,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1201:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 38,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "created_at",
                  "nameLocation": "1310:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 40,
                  "src": "1302:18:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 37,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1302:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1020:306:0"
            },
            "src": "1002:325:0"
          },
          {
            "body": {
              "id": 75,
              "nodeType": "Block",
              "src": "1562:648:0",
              "statements": [
                {
                  "expression": {
                    "id": 60,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 51,
                        "name": "userConsent",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13,
                        "src": "1628:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Consent_$8_storage_$",
                          "typeString": "mapping(address => struct LogAudits.Consent storage ref)"
                        }
                      },
                      "id": 54,
                      "indexExpression": {
                        "expression": {
                          "id": 52,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1640:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 53,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1644:6:0",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1640:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1628:23:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Consent_$8_storage",
                        "typeString": "struct LogAudits.Consent storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 56,
                          "name": "_treatmentConsent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "1687:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        {
                          "id": 57,
                          "name": "_referralConsent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 44,
                          "src": "1728:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        {
                          "id": 58,
                          "name": "_researchConsent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 46,
                          "src": "1768:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        ],
                        "id": 55,
                        "name": "Consent",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "1654:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Consent_$8_storage_ptr_$",
                          "typeString": "type(struct LogAudits.Consent storage pointer)"
                        }
                      },
                      "id": 59,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "nameLocations": [
                        "1676:9:0",
                        "1718:8:0",
                        "1758:8:0"
                      ],
                      "names": [
                        "treatment",
                        "referral",
                        "research"
                      ],
                      "nodeType": "FunctionCall",
                      "src": "1654:141:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Consent_$8_memory_ptr",
                        "typeString": "struct LogAudits.Consent memory"
                      }
                    },
                    "src": "1628:167:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Consent_$8_storage",
                      "typeString": "struct LogAudits.Consent storage ref"
                    }
                  },
                  "id": 61,
                  "nodeType": "ExpressionStatement",
                  "src": "1628:167:0"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 63,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1895:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 64,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1899:6:0",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1895:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 65,
                        "name": "_role",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48,
                        "src": "1919:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "hexValue": "7375626d69745f73796d70746f6d",
                        "id": 66,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1993:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f563abb18f241114833bd1703efa6ae3d91d3bf94a0a11a0525d4e2d08dd0557",
                          "typeString": "literal_string \"submit_symptom\""
                        },
                        "value": "submit_symptom"
                      },
                      {
                        "expression": {
                          "id": 67,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "2068:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 68,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2074:9:0",
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "2068:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "baseExpression": {
                          "id": 69,
                          "name": "userConsent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 13,
                          "src": "2139:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Consent_$8_storage_$",
                            "typeString": "mapping(address => struct LogAudits.Consent storage ref)"
                          }
                        },
                        "id": 72,
                        "indexExpression": {
                          "expression": {
                            "id": 70,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2151:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 71,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2155:6:0",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "2151:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2139:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Consent_$8_storage",
                          "typeString": "struct LogAudits.Consent storage ref"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f563abb18f241114833bd1703efa6ae3d91d3bf94a0a11a0525d4e2d08dd0557",
                          "typeString": "literal_string \"submit_symptom\""
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_struct$_Consent_$8_storage",
                          "typeString": "struct LogAudits.Consent storage ref"
                        }
                      ],
                      "id": 62,
                      "name": "PatientLogged",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30,
                      "src": "1868:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_struct$_Consent_$8_memory_ptr_$returns$__$",
                        "typeString": "function (address,string memory,string memory,uint256,struct LogAudits.Consent memory)"
                      }
                    },
                    "id": 73,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1868:335:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 74,
                  "nodeType": "EmitStatement",
                  "src": "1863:340:0"
                }
              ]
            },
            "functionSelector": "8fd1fd10",
            "id": 76,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "submitSymptom",
            "nameLocation": "1412:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 49,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 42,
                  "mutability": "mutable",
                  "name": "_treatmentConsent",
                  "nameLocation": "1440:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 76,
                  "src": "1435:22:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 41,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1435:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 44,
                  "mutability": "mutable",
                  "name": "_referralConsent",
                  "nameLocation": "1472:16:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 76,
                  "src": "1467:21:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 43,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1467:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 46,
                  "mutability": "mutable",
                  "name": "_researchConsent",
                  "nameLocation": "1503:16:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 76,
                  "src": "1498:21:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 45,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1498:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48,
                  "mutability": "mutable",
                  "name": "_role",
                  "nameLocation": "1543:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 76,
                  "src": "1529:19:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 47,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1529:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1425:129:0"
            },
            "returnParameters": {
              "id": 50,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1562:0:0"
            },
            "scope": 137,
            "src": "1403:807:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 90,
              "nodeType": "Block",
              "src": "2345:152:0",
              "statements": [
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 82,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2386:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 83,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2390:6:0",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2386:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 84,
                        "name": "_role",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 78,
                        "src": "2411:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "hexValue": "6164645f646961676e6f736973",
                        "id": 85,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2431:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ffff4e3e74222f5d1d676fc579d0f1834ed5b8d345e987de291c4d667ac8e040",
                          "typeString": "literal_string \"add_diagnosis\""
                        },
                        "value": "add_diagnosis"
                      },
                      {
                        "expression": {
                          "id": 86,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "2461:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 87,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2467:9:0",
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "2461:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ffff4e3e74222f5d1d676fc579d0f1834ed5b8d345e987de291c4d667ac8e040",
                          "typeString": "literal_string \"add_diagnosis\""
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 81,
                      "name": "ActionLogged",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40,
                      "src": "2360:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$returns$__$",
                        "typeString": "function (address,string memory,string memory,uint256)"
                      }
                    },
                    "id": 88,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2360:130:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 89,
                  "nodeType": "EmitStatement",
                  "src": "2355:135:0"
                }
              ]
            },
            "functionSelector": "07a16345",
            "id": 91,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addDiagnosis",
            "nameLocation": "2304:12:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 79,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 78,
                  "mutability": "mutable",
                  "name": "_role",
                  "nameLocation": "2331:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 91,
                  "src": "2317:19:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 77,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2317:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2316:21:0"
            },
            "returnParameters": {
              "id": 80,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2345:0:0"
            },
            "scope": 137,
            "src": "2295:202:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 105,
              "nodeType": "Block",
              "src": "2643:140:0",
              "statements": [
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 97,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2684:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 98,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2688:6:0",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2684:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 99,
                        "name": "_role",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 93,
                        "src": "2708:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "hexValue": "72656665725f746f5f646f63746f72",
                        "id": 100,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2728:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8b876305088622c8afff3cc9b163d49bba8428e86eb300129ca8f23c8bee044f",
                          "typeString": "literal_string \"refer_to_doctor\""
                        },
                        "value": "refer_to_doctor"
                      },
                      {
                        "expression": {
                          "id": 101,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "2760:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 102,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2766:9:0",
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "2760:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8b876305088622c8afff3cc9b163d49bba8428e86eb300129ca8f23c8bee044f",
                          "typeString": "literal_string \"refer_to_doctor\""
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 96,
                      "name": "ActionLogged",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40,
                      "src": "2658:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$returns$__$",
                        "typeString": "function (address,string memory,string memory,uint256)"
                      }
                    },
                    "id": 103,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2658:118:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 104,
                  "nodeType": "EmitStatement",
                  "src": "2653:123:0"
                }
              ]
            },
            "functionSelector": "ec99c7ea",
            "id": 106,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "referToDoctor",
            "nameLocation": "2601:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 94,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 93,
                  "mutability": "mutable",
                  "name": "_role",
                  "nameLocation": "2629:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 106,
                  "src": "2615:19:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 92,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2615:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2614:21:0"
            },
            "returnParameters": {
              "id": 95,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2643:0:0"
            },
            "scope": 137,
            "src": "2592:191:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 120,
              "nodeType": "Block",
              "src": "2916:137:0",
              "statements": [
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 112,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2957:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 113,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "2961:6:0",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2957:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 114,
                        "name": "_role",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 108,
                        "src": "2982:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "hexValue": "61737369676e5f74657374",
                        "id": 115,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3002:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_22388beebcc6a9a960f6849556dc34d670e021537bd6d6d7ea3ae69a2371b369",
                          "typeString": "literal_string \"assign_test\""
                        },
                        "value": "assign_test"
                      },
                      {
                        "expression": {
                          "id": 116,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "3030:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 117,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3036:9:0",
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "3030:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_22388beebcc6a9a960f6849556dc34d670e021537bd6d6d7ea3ae69a2371b369",
                          "typeString": "literal_string \"assign_test\""
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 111,
                      "name": "ActionLogged",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40,
                      "src": "2931:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$returns$__$",
                        "typeString": "function (address,string memory,string memory,uint256)"
                      }
                    },
                    "id": 118,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2931:115:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 119,
                  "nodeType": "EmitStatement",
                  "src": "2926:120:0"
                }
              ]
            },
            "functionSelector": "f9856fd1",
            "id": 121,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "assignTest",
            "nameLocation": "2877:10:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 109,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 108,
                  "mutability": "mutable",
                  "name": "_role",
                  "nameLocation": "2902:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 121,
                  "src": "2888:19:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 107,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2888:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2887:21:0"
            },
            "returnParameters": {
              "id": 110,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2916:0:0"
            },
            "scope": 137,
            "src": "2868:185:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 135,
              "nodeType": "Block",
              "src": "3201:145:0",
              "statements": [
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 127,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3242:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 128,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3246:6:0",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3242:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 129,
                        "name": "_role",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 123,
                        "src": "3267:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "hexValue": "7570646174655f746573745f726573756c7473",
                        "id": 130,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3287:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_13f688a72e112cfd498c1df18c327cdead470b3e27f0920acb42bddce42776b7",
                          "typeString": "literal_string \"update_test_results\""
                        },
                        "value": "update_test_results"
                      },
                      {
                        "expression": {
                          "id": 131,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "3323:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 132,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "3329:9:0",
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "3323:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_13f688a72e112cfd498c1df18c327cdead470b3e27f0920acb42bddce42776b7",
                          "typeString": "literal_string \"update_test_results\""
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 126,
                      "name": "ActionLogged",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40,
                      "src": "3216:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$returns$__$",
                        "typeString": "function (address,string memory,string memory,uint256)"
                      }
                    },
                    "id": 133,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3216:123:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 134,
                  "nodeType": "EmitStatement",
                  "src": "3211:128:0"
                }
              ]
            },
            "functionSelector": "c2b81ea3",
            "id": 136,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "updateTestResults",
            "nameLocation": "3155:17:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 124,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 123,
                  "mutability": "mutable",
                  "name": "_role",
                  "nameLocation": "3187:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 136,
                  "src": "3173:19:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 122,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3173:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3172:21:0"
            },
            "returnParameters": {
              "id": 125,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3201:0:0"
            },
            "scope": 137,
            "src": "3146:200:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 138,
        "src": "57:3291:0",
        "usedErrors": [],
        "usedEvents": [
          30,
          40
        ]
      }
    ],
    "src": "32:3317:0"
  },
  "bytecode": "6080604052348015600f57600080fd5b506105b68061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806307a163451461005c5780638fd1fd1014610071578063c2b81ea314610084578063ec99c7ea14610097578063f9856fd1146100aa575b600080fd5b61006f61006a3660046102ba565b6100bd565b005b61006f61007f36600461030c565b6100f1565b61006f6100923660046102ba565b61019a565b61006f6100a53660046102ba565b6101c3565b61006f6100b83660046102ba565b6101ec565b336001600160a01b031660008051602061056183398151915282426040516100e69291906103c1565b60405180910390a250565b6040805160608101825285151581528415156020808301918252851515838501908152336000818152928390529185902093518454935191511515620100000262ff0000199215156101000261ff00199215159290921661ffff1990951694909417171691909117825591517fbaf4064c4bce11ab1664ab198d1f4c3902389a7fe4a40279db2d522716fb729b9161018c918591429161040a565b60405180910390a250505050565b336001600160a01b031660008051602061056183398151915282426040516100e692919061047f565b336001600160a01b031660008051602061056183398151915282426040516100e69291906104ce565b336001600160a01b031660008051602061056183398151915282426040516100e6929190610519565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261023c57600080fd5b813567ffffffffffffffff81111561025657610256610215565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561028557610285610215565b60405281815283820160200185101561029d57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156102cc57600080fd5b813567ffffffffffffffff8111156102e357600080fd5b6102ef8482850161022b565b949350505050565b8035801515811461030757600080fd5b919050565b6000806000806080858703121561032257600080fd5b61032b856102f7565b9350610339602086016102f7565b9250610347604086016102f7565b9150606085013567ffffffffffffffff81111561036357600080fd5b61036f8782880161022b565b91505092959194509250565b6000815180845260005b818110156103a157602081850181015186830182015201610385565b506000602082860101526020601f19601f83011685010191505092915050565b6060815260006103d4606083018561037b565b8281036020840152600d81526c6164645f646961676e6f73697360981b6020820152604081019150508260408301529392505050565b60c08152600061041d60c083018661037b565b8281036020840152600e81526d7375626d69745f73796d70746f6d60901b602082015260408101915050836040830152825460ff81161515606084015260ff8160081c161515608084015260ff8160101c16151560a084015250949350505050565b606081526000610492606083018561037b565b828103602084015260138152727570646174655f746573745f726573756c747360681b6020820152604081019150508260408301529392505050565b6060815260006104e1606083018561037b565b8281036020840152600f81526e3932b332b92fba37afb237b1ba37b960891b6020820152604081019150508260408301529392505050565b60608152600061052c606083018561037b565b8281036020840152600b81526a185cdcda59db97dd195cdd60aa1b602082015260408101915050826040830152939250505056fe5b56e6ffbe95b7f92c787b65102287621b8b2f70e10bdf8c52f38ba60adaadfea2646970667358221220ceca09f74b461b50b1dd7d7cb330b05c953f8dc39cb600f80b7ab11766a5b52964736f6c634300081e0033",
  "bytecodeSha1": "5201078fb961df1149de54b2aa969555779b773f",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.30+commit.73712a01"
  },
  "contractName": "LogAudits",
  "coverageMap": {
    "branches": {
      "0": {}
    },
    "statements": {
      "0": {
        "LogAudits.addDiagnosis": {
          "0": [
            2355,
            2490
          ]
        },
        "LogAudits.assignTest": {
          "5": [
            2926,
            3046
          ]
        },
        "LogAudits.referToDoctor": {
          "4": [
            2653,
            2776
          ]
        },
        "LogAudits.submitSymptom": {
          "1": [
            1628,
            1795
          ],
          "2": [
            1863,
            2203
          ]
        },
        "LogAudits.updateTestResults": {
          "3": [
            3211,
            3339
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c806307a163451461005c5780638fd1fd1014610071578063c2b81ea314610084578063ec99c7ea14610097578063f9856fd1146100aa575b600080fd5b61006f61006a3660046102ba565b6100bd565b005b61006f61007f36600461030c565b6100f1565b61006f6100923660046102ba565b61019a565b61006f6100a53660046102ba565b6101c3565b61006f6100b83660046102ba565b6101ec565b336001600160a01b031660008051602061056183398151915282426040516100e69291906103c1565b60405180910390a250565b6040805160608101825285151581528415156020808301918252851515838501908152336000818152928390529185902093518454935191511515620100000262ff0000199215156101000261ff00199215159290921661ffff1990951694909417171691909117825591517fbaf4064c4bce11ab1664ab198d1f4c3902389a7fe4a40279db2d522716fb729b9161018c918591429161040a565b60405180910390a250505050565b336001600160a01b031660008051602061056183398151915282426040516100e692919061047f565b336001600160a01b031660008051602061056183398151915282426040516100e69291906104ce565b336001600160a01b031660008051602061056183398151915282426040516100e6929190610519565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261023c57600080fd5b813567ffffffffffffffff81111561025657610256610215565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561028557610285610215565b60405281815283820160200185101561029d57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156102cc57600080fd5b813567ffffffffffffffff8111156102e357600080fd5b6102ef8482850161022b565b949350505050565b8035801515811461030757600080fd5b919050565b6000806000806080858703121561032257600080fd5b61032b856102f7565b9350610339602086016102f7565b9250610347604086016102f7565b9150606085013567ffffffffffffffff81111561036357600080fd5b61036f8782880161022b565b91505092959194509250565b6000815180845260005b818110156103a157602081850181015186830182015201610385565b506000602082860101526020601f19601f83011685010191505092915050565b6060815260006103d4606083018561037b565b8281036020840152600d81526c6164645f646961676e6f73697360981b6020820152604081019150508260408301529392505050565b60c08152600061041d60c083018661037b565b8281036020840152600e81526d7375626d69745f73796d70746f6d60901b602082015260408101915050836040830152825460ff81161515606084015260ff8160081c161515608084015260ff8160101c16151560a084015250949350505050565b606081526000610492606083018561037b565b828103602084015260138152727570646174655f746573745f726573756c747360681b6020820152604081019150508260408301529392505050565b6060815260006104e1606083018561037b565b8281036020840152600f81526e3932b332b92fba37afb237b1ba37b960891b6020820152604081019150508260408301529392505050565b60608152600061052c606083018561037b565b8281036020840152600b81526a185cdcda59db97dd195cdd60aa1b602082015260408101915050826040830152939250505056fe5b56e6ffbe95b7f92c787b65102287621b8b2f70e10bdf8c52f38ba60adaadfea2646970667358221220ceca09f74b461b50b1dd7d7cb330b05c953f8dc39cb600f80b7ab11766a5b52964736f6c634300081e0033",
  "deployedSourceMap": "57:3291:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2295:202;;;;;;:::i;:::-;;:::i;:::-;;1403:807;;;;;;:::i;:::-;;:::i;3146:200::-;;;;;;:::i;:::-;;:::i;2592:191::-;;;;;;:::i;:::-;;:::i;2868:185::-;;;;;;:::i;:::-;;:::i;2295:202::-;2386:10;-1:-1:-1;;;;;2360:130:0;-1:-1:-1;;;;;;;;;;;2411:5:0;2461:15;2360:130;;;;;;;:::i;:::-;;;;;;;;2295:202;:::o;1403:807::-;1654:141;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1640:10;-1:-1:-1;1628:23:0;;;;;;;;;;;:167;;;;;;;;;;;;-1:-1:-1;;1628:167:0;;;;;-1:-1:-1;;1628:167:0;;;;;;;-1:-1:-1;;1628:167:0;;;;;;;;;;;;;;;1868:335;;;;;;1919:5;;2068:15;;1868:335;:::i;:::-;;;;;;;;1403:807;;;;:::o;3146:200::-;3242:10;-1:-1:-1;;;;;3216:123:0;-1:-1:-1;;;;;;;;;;;3267:5:0;3323:15;3216:123;;;;;;;:::i;2592:191::-;2684:10;-1:-1:-1;;;;;2658:118:0;-1:-1:-1;;;;;;;;;;;2708:5:0;2760:15;2658:118;;;;;;;:::i;2868:185::-;2957:10;-1:-1:-1;;;;;2931:115:0;-1:-1:-1;;;;;;;;;;;2982:5:0;3030:15;2931:115;;;;;;;:::i;14:127:1:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:726;189:5;242:3;235:4;227:6;223:17;219:27;209:55;;260:1;257;250:12;209:55;300:6;287:20;330:18;322:6;319:30;316:56;;;352:18;;:::i;:::-;401:2;395:9;493:2;455:17;;-1:-1:-1;;451:31:1;;;484:2;447:40;443:54;431:67;;528:18;513:34;;549:22;;;510:62;507:88;;;575:18;;:::i;:::-;611:2;604:22;635;;;676:19;;;697:4;672:30;669:39;-1:-1:-1;666:59:1;;;721:1;718;711:12;666:59;785:6;778:4;770:6;766:17;759:4;751:6;747:17;734:58;840:1;812:19;;;833:4;808:30;801:41;;;;816:6;146:726;-1:-1:-1;;;146:726:1:o;877:322::-;946:6;999:2;987:9;978:7;974:23;970:32;967:52;;;1015:1;1012;1005:12;967:52;1055:9;1042:23;1088:18;1080:6;1077:30;1074:50;;;1120:1;1117;1110:12;1074:50;1143;1185:7;1176:6;1165:9;1161:22;1143:50;:::i;:::-;1133:60;877:322;-1:-1:-1;;;;877:322:1:o;1204:160::-;1269:20;;1325:13;;1318:21;1308:32;;1298:60;;1354:1;1351;1344:12;1298:60;1204:160;;;:::o;1369:527::-;1456:6;1464;1472;1480;1533:3;1521:9;1512:7;1508:23;1504:33;1501:53;;;1550:1;1547;1540:12;1501:53;1573:26;1589:9;1573:26;:::i;:::-;1563:36;;1618:35;1649:2;1638:9;1634:18;1618:35;:::i;:::-;1608:45;;1672:35;1703:2;1692:9;1688:18;1672:35;:::i;:::-;1662:45;;1758:2;1747:9;1743:18;1730:32;1785:18;1777:6;1774:30;1771:50;;;1817:1;1814;1807:12;1771:50;1840;1882:7;1873:6;1862:9;1858:22;1840:50;:::i;:::-;1830:60;;;1369:527;;;;;;;:::o;1901:400::-;1943:3;1981:5;1975:12;2008:6;2003:3;1996:19;2033:1;2043:139;2057:6;2054:1;2051:13;2043:139;;;2165:4;2150:13;;;2146:24;;2140:31;2120:11;;;2116:22;;2109:63;2072:12;2043:139;;;2047:3;2227:1;2220:4;2211:6;2206:3;2202:16;2198:27;2191:38;2290:4;2283:2;2279:7;2274:2;2266:6;2262:15;2258:29;2253:3;2249:39;2245:50;2238:57;;;1901:400;;;;:::o;2306:565::-;2584:2;2573:9;2566:21;2547:4;2610:45;2651:2;2640:9;2636:18;2628:6;2610:45;:::i;:::-;2703:9;2695:6;2691:22;2686:2;2675:9;2671:18;2664:50;2738:2;2730:6;2723:18;-1:-1:-1;;;2769:2:1;2761:6;2757:15;2750:40;2819:2;2811:6;2807:15;2799:23;;;2858:6;2853:2;2842:9;2838:18;2831:34;2306:565;;;;;:::o;2876:914::-;3223:3;3212:9;3205:22;3186:4;3250:46;3291:3;3280:9;3276:19;3268:6;3250:46;:::i;:::-;3344:9;3336:6;3332:22;3327:2;3316:9;3312:18;3305:50;3379:2;3371:6;3364:18;-1:-1:-1;;;3410:2:1;3402:6;3398:15;3391:41;3461:2;3453:6;3449:15;3441:23;;;3500:6;3495:2;3484:9;3480:18;3473:34;3539:6;3533:13;3611:4;3600:9;3596:20;3589:28;3582:36;3577:2;3566:9;3562:18;3555:64;3693:4;3681:9;3678:1;3674:17;3670:28;3663:36;3656:44;3650:3;3639:9;3635:19;3628:73;3776:4;3764:9;3760:2;3756:18;3752:29;3745:37;3738:45;3732:3;3721:9;3717:19;3710:74;;2876:914;;;;;;:::o;3795:571::-;4073:2;4062:9;4055:21;4036:4;4099:45;4140:2;4129:9;4125:18;4117:6;4099:45;:::i;:::-;4192:9;4184:6;4180:22;4175:2;4164:9;4160:18;4153:50;4227:2;4219:6;4212:18;-1:-1:-1;;;4258:2:1;4250:6;4246:15;4239:46;4314:2;4306:6;4302:15;4294:23;;;4353:6;4348:2;4337:9;4333:18;4326:34;3795:571;;;;;:::o;4371:567::-;4649:2;4638:9;4631:21;4612:4;4675:45;4716:2;4705:9;4701:18;4693:6;4675:45;:::i;:::-;4768:9;4760:6;4756:22;4751:2;4740:9;4736:18;4729:50;4803:2;4795:6;4788:18;-1:-1:-1;;;4834:2:1;4826:6;4822:15;4815:42;4886:2;4878:6;4874:15;4866:23;;;4925:6;4920:2;4909:9;4905:18;4898:34;4371:567;;;;;:::o;4943:563::-;5221:2;5210:9;5203:21;5184:4;5247:45;5288:2;5277:9;5273:18;5265:6;5247:45;:::i;:::-;5340:9;5332:6;5328:22;5323:2;5312:9;5308:18;5301:50;5375:2;5367:6;5360:18;-1:-1:-1;;;5406:2:1;5398:6;5394:15;5387:38;5454:2;5446:6;5442:15;5434:23;;;5493:6;5488:2;5477:9;5473:18;5466:34;4943:563;;;;;:::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    57,
    3348
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7A16345 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x8FD1FD10 EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0xC2B81EA3 EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0xEC99C7EA EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0xF9856FD1 EQ PUSH2 0xAA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x6A CALLDATASIZE PUSH1 0x4 PUSH2 0x2BA JUMP JUMPDEST PUSH2 0xBD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6F PUSH2 0x7F CALLDATASIZE PUSH1 0x4 PUSH2 0x30C JUMP JUMPDEST PUSH2 0xF1 JUMP JUMPDEST PUSH2 0x6F PUSH2 0x92 CALLDATASIZE PUSH1 0x4 PUSH2 0x2BA JUMP JUMPDEST PUSH2 0x19A JUMP JUMPDEST PUSH2 0x6F PUSH2 0xA5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2BA JUMP JUMPDEST PUSH2 0x1C3 JUMP JUMPDEST PUSH2 0x6F PUSH2 0xB8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2BA JUMP JUMPDEST PUSH2 0x1EC JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x561 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0xE6 SWAP3 SWAP2 SWAP1 PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP6 ISZERO ISZERO DUP2 MSTORE DUP5 ISZERO ISZERO PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE DUP6 ISZERO ISZERO DUP4 DUP6 ADD SWAP1 DUP2 MSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE SWAP3 DUP4 SWAP1 MSTORE SWAP2 DUP6 SWAP1 KECCAK256 SWAP4 MLOAD DUP5 SLOAD SWAP4 MLOAD SWAP2 MLOAD ISZERO ISZERO PUSH3 0x10000 MUL PUSH3 0xFF0000 NOT SWAP3 ISZERO ISZERO PUSH2 0x100 MUL PUSH2 0xFF00 NOT SWAP3 ISZERO ISZERO SWAP3 SWAP1 SWAP3 AND PUSH2 0xFFFF NOT SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR OR AND SWAP2 SWAP1 SWAP2 OR DUP3 SSTORE SWAP2 MLOAD PUSH32 0xBAF4064C4BCE11AB1664AB198D1F4C3902389A7FE4A40279DB2D522716FB729B SWAP2 PUSH2 0x18C SWAP2 DUP6 SWAP2 TIMESTAMP SWAP2 PUSH2 0x40A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x561 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0xE6 SWAP3 SWAP2 SWAP1 PUSH2 0x47F JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x561 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0xE6 SWAP3 SWAP2 SWAP1 PUSH2 0x4CE JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x561 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0xE6 SWAP3 SWAP2 SWAP1 PUSH2 0x519 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x23C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x256 JUMPI PUSH2 0x256 PUSH2 0x215 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x285 JUMPI PUSH2 0x285 PUSH2 0x215 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP4 DUP3 ADD PUSH1 0x20 ADD DUP6 LT ISZERO PUSH2 0x29D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2EF DUP5 DUP3 DUP6 ADD PUSH2 0x22B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x307 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x32B DUP6 PUSH2 0x2F7 JUMP JUMPDEST SWAP4 POP PUSH2 0x339 PUSH1 0x20 DUP7 ADD PUSH2 0x2F7 JUMP JUMPDEST SWAP3 POP PUSH2 0x347 PUSH1 0x40 DUP7 ADD PUSH2 0x2F7 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x36F DUP8 DUP3 DUP9 ADD PUSH2 0x22B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3A1 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x385 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3D4 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x37B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0xD DUP2 MSTORE PUSH13 0x6164645F646961676E6F736973 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x41D PUSH1 0xC0 DUP4 ADD DUP7 PUSH2 0x37B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0xE DUP2 MSTORE PUSH14 0x7375626D69745F73796D70746F6D PUSH1 0x90 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE DUP3 SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO ISZERO PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xFF DUP2 PUSH1 0x10 SHR AND ISZERO ISZERO PUSH1 0xA0 DUP5 ADD MSTORE POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x492 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x37B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x13 DUP2 MSTORE PUSH19 0x7570646174655F746573745F726573756C7473 PUSH1 0x68 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x4E1 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x37B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0xF DUP2 MSTORE PUSH15 0x3932B332B92FBA37AFB237B1BA37B9 PUSH1 0x89 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x52C PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x37B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0xB DUP2 MSTORE PUSH11 0x185CDCDA59DB97DD195CDD PUSH1 0xAA SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP INVALID JUMPDEST JUMP DUPN 0xFF 0xBE SWAP6 0xB7 EXTDELEGATECALL 0x2C PUSH25 0x7B65102287621B8B2F70E10BDF8C52F38BA60ADAADFEA26469 PUSH17 0x667358221220CECA09F74B461B50B1DD7D PUSH29 0xB330B05C953F8DC39CB600F80B7AB11766A5B52964736F6C634300081E STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        57,
        3348
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "6": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "DUP1",
      "path": "0"
    },
    "7": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "12": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "DUP1",
      "path": "0"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "REVERT",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "17": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "POP",
      "path": "0"
    },
    "18": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "21": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "LT",
      "path": "0"
    },
    "22": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x57"
    },
    "25": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "29": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "SHR",
      "path": "0"
    },
    "32": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "DUP1",
      "path": "0"
    },
    "33": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x7A16345"
    },
    "38": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "EQ",
      "path": "0"
    },
    "39": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5C"
    },
    "42": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "43": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "DUP1",
      "path": "0"
    },
    "44": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x8FD1FD10"
    },
    "49": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "EQ",
      "path": "0"
    },
    "50": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x71"
    },
    "53": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "54": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "DUP1",
      "path": "0"
    },
    "55": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xC2B81EA3"
    },
    "60": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "EQ",
      "path": "0"
    },
    "61": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x84"
    },
    "64": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "65": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "DUP1",
      "path": "0"
    },
    "66": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xEC99C7EA"
    },
    "71": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "EQ",
      "path": "0"
    },
    "72": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x97"
    },
    "75": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "76": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "DUP1",
      "path": "0"
    },
    "77": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xF9856FD1"
    },
    "82": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "EQ",
      "path": "0"
    },
    "83": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAA"
    },
    "86": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "87": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "88": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "90": {
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "DUP1",
      "path": "0"
    },
    "91": {
      "first_revert": true,
      "fn": null,
      "offset": [
        57,
        3348
      ],
      "op": "REVERT",
      "path": "0"
    },
    "92": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2295,
        2497
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "93": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2295,
        2497
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6F"
    },
    "96": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2295,
        2497
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6A"
    },
    "99": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2295,
        2497
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "100": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2295,
        2497
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "102": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2295,
        2497
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2BA"
    },
    "105": {
      "fn": "LogAudits.addDiagnosis",
      "jump": "i",
      "offset": [
        2295,
        2497
      ],
      "op": "JUMP",
      "path": "0"
    },
    "106": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2295,
        2497
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "107": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2295,
        2497
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBD"
    },
    "110": {
      "fn": "LogAudits.addDiagnosis",
      "jump": "i",
      "offset": [
        2295,
        2497
      ],
      "op": "JUMP",
      "path": "0"
    },
    "111": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2295,
        2497
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "112": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2295,
        2497
      ],
      "op": "STOP",
      "path": "0"
    },
    "113": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1403,
        2210
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "114": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1403,
        2210
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6F"
    },
    "117": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1403,
        2210
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7F"
    },
    "120": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1403,
        2210
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "121": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1403,
        2210
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "123": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1403,
        2210
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x30C"
    },
    "126": {
      "fn": "LogAudits.submitSymptom",
      "jump": "i",
      "offset": [
        1403,
        2210
      ],
      "op": "JUMP",
      "path": "0"
    },
    "127": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1403,
        2210
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "128": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1403,
        2210
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF1"
    },
    "131": {
      "fn": "LogAudits.submitSymptom",
      "jump": "i",
      "offset": [
        1403,
        2210
      ],
      "op": "JUMP",
      "path": "0"
    },
    "132": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3146,
        3346
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "133": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3146,
        3346
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6F"
    },
    "136": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3146,
        3346
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x92"
    },
    "139": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3146,
        3346
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "140": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3146,
        3346
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "142": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3146,
        3346
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2BA"
    },
    "145": {
      "fn": "LogAudits.updateTestResults",
      "jump": "i",
      "offset": [
        3146,
        3346
      ],
      "op": "JUMP",
      "path": "0"
    },
    "146": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3146,
        3346
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "147": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3146,
        3346
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19A"
    },
    "150": {
      "fn": "LogAudits.updateTestResults",
      "jump": "i",
      "offset": [
        3146,
        3346
      ],
      "op": "JUMP",
      "path": "0"
    },
    "151": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2592,
        2783
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "152": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2592,
        2783
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6F"
    },
    "155": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2592,
        2783
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA5"
    },
    "158": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2592,
        2783
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "159": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2592,
        2783
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "161": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2592,
        2783
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2BA"
    },
    "164": {
      "fn": "LogAudits.referToDoctor",
      "jump": "i",
      "offset": [
        2592,
        2783
      ],
      "op": "JUMP",
      "path": "0"
    },
    "165": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2592,
        2783
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "166": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2592,
        2783
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C3"
    },
    "169": {
      "fn": "LogAudits.referToDoctor",
      "jump": "i",
      "offset": [
        2592,
        2783
      ],
      "op": "JUMP",
      "path": "0"
    },
    "170": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2868,
        3053
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "171": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2868,
        3053
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6F"
    },
    "174": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2868,
        3053
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB8"
    },
    "177": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2868,
        3053
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "178": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2868,
        3053
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "180": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2868,
        3053
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2BA"
    },
    "183": {
      "fn": "LogAudits.assignTest",
      "jump": "i",
      "offset": [
        2868,
        3053
      ],
      "op": "JUMP",
      "path": "0"
    },
    "184": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2868,
        3053
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "185": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2868,
        3053
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1EC"
    },
    "188": {
      "fn": "LogAudits.assignTest",
      "jump": "i",
      "offset": [
        2868,
        3053
      ],
      "op": "JUMP",
      "path": "0"
    },
    "189": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2295,
        2497
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "190": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2386,
        2396
      ],
      "op": "CALLER",
      "path": "0",
      "statement": 0
    },
    "191": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "193": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "195": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "197": {
      "op": "SHL"
    },
    "198": {
      "op": "SUB"
    },
    "199": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2360,
        2490
      ],
      "op": "AND",
      "path": "0"
    },
    "200": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "202": {
      "op": "DUP1"
    },
    "203": {
      "op": "MLOAD"
    },
    "204": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "206": {
      "op": "PUSH2",
      "value": "0x561"
    },
    "209": {
      "op": "DUP4"
    },
    "210": {
      "op": "CODECOPY"
    },
    "211": {
      "op": "DUP2"
    },
    "212": {
      "op": "MLOAD"
    },
    "213": {
      "op": "SWAP2"
    },
    "214": {
      "op": "MSTORE"
    },
    "215": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2411,
        2416
      ],
      "op": "DUP3",
      "path": "0"
    },
    "216": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2461,
        2476
      ],
      "op": "TIMESTAMP",
      "path": "0"
    },
    "217": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2360,
        2490
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "219": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2360,
        2490
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "220": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2360,
        2490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE6"
    },
    "223": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2360,
        2490
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "224": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2360,
        2490
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "225": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2360,
        2490
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "226": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2360,
        2490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3C1"
    },
    "229": {
      "fn": "LogAudits.addDiagnosis",
      "jump": "i",
      "offset": [
        2360,
        2490
      ],
      "op": "JUMP",
      "path": "0"
    },
    "230": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2360,
        2490
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "231": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2360,
        2490
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "233": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2360,
        2490
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "234": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2360,
        2490
      ],
      "op": "DUP1",
      "path": "0"
    },
    "235": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2360,
        2490
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "236": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2360,
        2490
      ],
      "op": "SUB",
      "path": "0"
    },
    "237": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2360,
        2490
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "238": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2360,
        2490
      ],
      "op": "LOG2",
      "path": "0"
    },
    "239": {
      "fn": "LogAudits.addDiagnosis",
      "offset": [
        2295,
        2497
      ],
      "op": "POP",
      "path": "0"
    },
    "240": {
      "fn": "LogAudits.addDiagnosis",
      "jump": "o",
      "offset": [
        2295,
        2497
      ],
      "op": "JUMP",
      "path": "0"
    },
    "241": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1403,
        2210
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "242": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 1,
      "value": "0x40"
    },
    "244": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "DUP1",
      "path": "0"
    },
    "245": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "246": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "248": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "DUP2",
      "path": "0"
    },
    "249": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "ADD",
      "path": "0"
    },
    "250": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "DUP3",
      "path": "0"
    },
    "251": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "252": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "DUP6",
      "path": "0"
    },
    "253": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "254": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "255": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "DUP2",
      "path": "0"
    },
    "256": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "257": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "DUP5",
      "path": "0"
    },
    "258": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "259": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "260": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "262": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "DUP1",
      "path": "0"
    },
    "263": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "DUP4",
      "path": "0"
    },
    "264": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "ADD",
      "path": "0"
    },
    "265": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "266": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "DUP3",
      "path": "0"
    },
    "267": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "268": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "DUP6",
      "path": "0"
    },
    "269": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "270": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "271": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "DUP4",
      "path": "0"
    },
    "272": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "DUP6",
      "path": "0"
    },
    "273": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "ADD",
      "path": "0"
    },
    "274": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "275": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "DUP2",
      "path": "0"
    },
    "276": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1654,
        1795
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "277": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1640,
        1650
      ],
      "op": "CALLER",
      "path": "0"
    },
    "278": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "280": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1651
      ],
      "op": "DUP2",
      "path": "0"
    },
    "281": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1651
      ],
      "op": "DUP2",
      "path": "0"
    },
    "282": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1651
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "283": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1651
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "284": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1651
      ],
      "op": "DUP4",
      "path": "0"
    },
    "285": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1651
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "286": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1651
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "287": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1651
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "288": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1651
      ],
      "op": "DUP6",
      "path": "0"
    },
    "289": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1651
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "290": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1651
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "291": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "292": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "293": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "DUP5",
      "path": "0"
    },
    "294": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "295": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "296": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "297": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "298": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "299": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "300": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "301": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x10000"
    },
    "305": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "MUL",
      "path": "0"
    },
    "306": {
      "op": "PUSH3",
      "value": "0xFF0000"
    },
    "310": {
      "op": "NOT"
    },
    "311": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "312": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "313": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "314": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "317": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "MUL",
      "path": "0"
    },
    "318": {
      "op": "PUSH2",
      "value": "0xFF00"
    },
    "321": {
      "op": "NOT"
    },
    "322": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "323": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "324": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "325": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "326": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "327": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "328": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "AND",
      "path": "0"
    },
    "329": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "332": {
      "op": "NOT"
    },
    "333": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "334": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "335": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "AND",
      "path": "0"
    },
    "336": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "337": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "338": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "339": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "OR",
      "path": "0"
    },
    "340": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "OR",
      "path": "0"
    },
    "341": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "AND",
      "path": "0"
    },
    "342": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "343": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "344": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "345": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "OR",
      "path": "0"
    },
    "346": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "DUP3",
      "path": "0"
    },
    "347": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1628,
        1795
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "348": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1868,
        2203
      ],
      "op": "SWAP2",
      "path": "0",
      "statement": 2
    },
    "349": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1868,
        2203
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "350": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1868,
        2203
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0xBAF4064C4BCE11AB1664AB198D1F4C3902389A7FE4A40279DB2D522716FB729B"
    },
    "383": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1868,
        2203
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "384": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1868,
        2203
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18C"
    },
    "387": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1868,
        2203
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "388": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1919,
        1924
      ],
      "op": "DUP6",
      "path": "0"
    },
    "389": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1919,
        1924
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "390": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        2068,
        2083
      ],
      "op": "TIMESTAMP",
      "path": "0"
    },
    "391": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        2068,
        2083
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "392": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1868,
        2203
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x40A"
    },
    "395": {
      "fn": "LogAudits.submitSymptom",
      "jump": "i",
      "offset": [
        1868,
        2203
      ],
      "op": "JUMP",
      "path": "0"
    },
    "396": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1868,
        2203
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "397": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1868,
        2203
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "399": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1868,
        2203
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "400": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1868,
        2203
      ],
      "op": "DUP1",
      "path": "0"
    },
    "401": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1868,
        2203
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "402": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1868,
        2203
      ],
      "op": "SUB",
      "path": "0"
    },
    "403": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1868,
        2203
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "404": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1868,
        2203
      ],
      "op": "LOG2",
      "path": "0"
    },
    "405": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1403,
        2210
      ],
      "op": "POP",
      "path": "0"
    },
    "406": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1403,
        2210
      ],
      "op": "POP",
      "path": "0"
    },
    "407": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1403,
        2210
      ],
      "op": "POP",
      "path": "0"
    },
    "408": {
      "fn": "LogAudits.submitSymptom",
      "offset": [
        1403,
        2210
      ],
      "op": "POP",
      "path": "0"
    },
    "409": {
      "fn": "LogAudits.submitSymptom",
      "jump": "o",
      "offset": [
        1403,
        2210
      ],
      "op": "JUMP",
      "path": "0"
    },
    "410": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3146,
        3346
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "411": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3242,
        3252
      ],
      "op": "CALLER",
      "path": "0",
      "statement": 3
    },
    "412": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "414": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "416": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "418": {
      "op": "SHL"
    },
    "419": {
      "op": "SUB"
    },
    "420": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3216,
        3339
      ],
      "op": "AND",
      "path": "0"
    },
    "421": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "423": {
      "op": "DUP1"
    },
    "424": {
      "op": "MLOAD"
    },
    "425": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "427": {
      "op": "PUSH2",
      "value": "0x561"
    },
    "430": {
      "op": "DUP4"
    },
    "431": {
      "op": "CODECOPY"
    },
    "432": {
      "op": "DUP2"
    },
    "433": {
      "op": "MLOAD"
    },
    "434": {
      "op": "SWAP2"
    },
    "435": {
      "op": "MSTORE"
    },
    "436": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3267,
        3272
      ],
      "op": "DUP3",
      "path": "0"
    },
    "437": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3323,
        3338
      ],
      "op": "TIMESTAMP",
      "path": "0"
    },
    "438": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3216,
        3339
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "440": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3216,
        3339
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "441": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3216,
        3339
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE6"
    },
    "444": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3216,
        3339
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "445": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3216,
        3339
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "446": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3216,
        3339
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "447": {
      "fn": "LogAudits.updateTestResults",
      "offset": [
        3216,
        3339
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x47F"
    },
    "450": {
      "fn": "LogAudits.updateTestResults",
      "jump": "i",
      "offset": [
        3216,
        3339
      ],
      "op": "JUMP",
      "path": "0"
    },
    "451": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2592,
        2783
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "452": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2684,
        2694
      ],
      "op": "CALLER",
      "path": "0",
      "statement": 4
    },
    "453": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "455": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "457": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "459": {
      "op": "SHL"
    },
    "460": {
      "op": "SUB"
    },
    "461": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2658,
        2776
      ],
      "op": "AND",
      "path": "0"
    },
    "462": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "464": {
      "op": "DUP1"
    },
    "465": {
      "op": "MLOAD"
    },
    "466": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "468": {
      "op": "PUSH2",
      "value": "0x561"
    },
    "471": {
      "op": "DUP4"
    },
    "472": {
      "op": "CODECOPY"
    },
    "473": {
      "op": "DUP2"
    },
    "474": {
      "op": "MLOAD"
    },
    "475": {
      "op": "SWAP2"
    },
    "476": {
      "op": "MSTORE"
    },
    "477": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2708,
        2713
      ],
      "op": "DUP3",
      "path": "0"
    },
    "478": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2760,
        2775
      ],
      "op": "TIMESTAMP",
      "path": "0"
    },
    "479": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2658,
        2776
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "481": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2658,
        2776
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "482": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2658,
        2776
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE6"
    },
    "485": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2658,
        2776
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "486": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2658,
        2776
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "487": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2658,
        2776
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "488": {
      "fn": "LogAudits.referToDoctor",
      "offset": [
        2658,
        2776
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4CE"
    },
    "491": {
      "fn": "LogAudits.referToDoctor",
      "jump": "i",
      "offset": [
        2658,
        2776
      ],
      "op": "JUMP",
      "path": "0"
    },
    "492": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2868,
        3053
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "493": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2957,
        2967
      ],
      "op": "CALLER",
      "path": "0",
      "statement": 5
    },
    "494": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "496": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "498": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "500": {
      "op": "SHL"
    },
    "501": {
      "op": "SUB"
    },
    "502": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2931,
        3046
      ],
      "op": "AND",
      "path": "0"
    },
    "503": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "505": {
      "op": "DUP1"
    },
    "506": {
      "op": "MLOAD"
    },
    "507": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "509": {
      "op": "PUSH2",
      "value": "0x561"
    },
    "512": {
      "op": "DUP4"
    },
    "513": {
      "op": "CODECOPY"
    },
    "514": {
      "op": "DUP2"
    },
    "515": {
      "op": "MLOAD"
    },
    "516": {
      "op": "SWAP2"
    },
    "517": {
      "op": "MSTORE"
    },
    "518": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2982,
        2987
      ],
      "op": "DUP3",
      "path": "0"
    },
    "519": {
      "fn": "LogAudits.assignTest",
      "offset": [
        3030,
        3045
      ],
      "op": "TIMESTAMP",
      "path": "0"
    },
    "520": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2931,
        3046
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "522": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2931,
        3046
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "523": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2931,
        3046
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE6"
    },
    "526": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2931,
        3046
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "527": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2931,
        3046
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "528": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2931,
        3046
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "529": {
      "fn": "LogAudits.assignTest",
      "offset": [
        2931,
        3046
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x519"
    },
    "532": {
      "fn": "LogAudits.assignTest",
      "jump": "i",
      "offset": [
        2931,
        3046
      ],
      "op": "JUMP",
      "path": "0"
    },
    "533": {
      "op": "JUMPDEST"
    },
    "534": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "539": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "541": {
      "op": "SHL"
    },
    "542": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "544": {
      "op": "MSTORE"
    },
    "545": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "547": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "549": {
      "op": "MSTORE"
    },
    "550": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "552": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "554": {
      "op": "REVERT"
    },
    "555": {
      "op": "JUMPDEST"
    },
    "556": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "558": {
      "op": "DUP3"
    },
    "559": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "561": {
      "op": "DUP4"
    },
    "562": {
      "op": "ADD"
    },
    "563": {
      "op": "SLT"
    },
    "564": {
      "op": "PUSH2",
      "value": "0x23C"
    },
    "567": {
      "op": "JUMPI"
    },
    "568": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "570": {
      "op": "DUP1"
    },
    "571": {
      "op": "REVERT"
    },
    "572": {
      "op": "JUMPDEST"
    },
    "573": {
      "op": "DUP2"
    },
    "574": {
      "op": "CALLDATALOAD"
    },
    "575": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "584": {
      "op": "DUP2"
    },
    "585": {
      "op": "GT"
    },
    "586": {
      "op": "ISZERO"
    },
    "587": {
      "op": "PUSH2",
      "value": "0x256"
    },
    "590": {
      "op": "JUMPI"
    },
    "591": {
      "op": "PUSH2",
      "value": "0x256"
    },
    "594": {
      "op": "PUSH2",
      "value": "0x215"
    },
    "597": {
      "jump": "i",
      "op": "JUMP"
    },
    "598": {
      "op": "JUMPDEST"
    },
    "599": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "601": {
      "op": "MLOAD"
    },
    "602": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "604": {
      "op": "DUP3"
    },
    "605": {
      "op": "ADD"
    },
    "606": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "608": {
      "op": "NOT"
    },
    "609": {
      "op": "SWAP1"
    },
    "610": {
      "op": "DUP2"
    },
    "611": {
      "op": "AND"
    },
    "612": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "614": {
      "op": "ADD"
    },
    "615": {
      "op": "AND"
    },
    "616": {
      "op": "DUP2"
    },
    "617": {
      "op": "ADD"
    },
    "618": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "627": {
      "op": "DUP2"
    },
    "628": {
      "op": "GT"
    },
    "629": {
      "op": "DUP3"
    },
    "630": {
      "op": "DUP3"
    },
    "631": {
      "op": "LT"
    },
    "632": {
      "op": "OR"
    },
    "633": {
      "op": "ISZERO"
    },
    "634": {
      "op": "PUSH2",
      "value": "0x285"
    },
    "637": {
      "op": "JUMPI"
    },
    "638": {
      "op": "PUSH2",
      "value": "0x285"
    },
    "641": {
      "op": "PUSH2",
      "value": "0x215"
    },
    "644": {
      "jump": "i",
      "op": "JUMP"
    },
    "645": {
      "op": "JUMPDEST"
    },
    "646": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "648": {
      "op": "MSTORE"
    },
    "649": {
      "op": "DUP2"
    },
    "650": {
      "op": "DUP2"
    },
    "651": {
      "op": "MSTORE"
    },
    "652": {
      "op": "DUP4"
    },
    "653": {
      "op": "DUP3"
    },
    "654": {
      "op": "ADD"
    },
    "655": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "657": {
      "op": "ADD"
    },
    "658": {
      "op": "DUP6"
    },
    "659": {
      "op": "LT"
    },
    "660": {
      "op": "ISZERO"
    },
    "661": {
      "op": "PUSH2",
      "value": "0x29D"
    },
    "664": {
      "op": "JUMPI"
    },
    "665": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "667": {
      "op": "DUP1"
    },
    "668": {
      "op": "REVERT"
    },
    "669": {
      "op": "JUMPDEST"
    },
    "670": {
      "op": "DUP2"
    },
    "671": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "673": {
      "op": "DUP6"
    },
    "674": {
      "op": "ADD"
    },
    "675": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "677": {
      "op": "DUP4"
    },
    "678": {
      "op": "ADD"
    },
    "679": {
      "op": "CALLDATACOPY"
    },
    "680": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "682": {
      "op": "SWAP2"
    },
    "683": {
      "op": "DUP2"
    },
    "684": {
      "op": "ADD"
    },
    "685": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "687": {
      "op": "ADD"
    },
    "688": {
      "op": "SWAP2"
    },
    "689": {
      "op": "SWAP1"
    },
    "690": {
      "op": "SWAP2"
    },
    "691": {
      "op": "MSTORE"
    },
    "692": {
      "op": "SWAP4"
    },
    "693": {
      "op": "SWAP3"
    },
    "694": {
      "op": "POP"
    },
    "695": {
      "op": "POP"
    },
    "696": {
      "op": "POP"
    },
    "697": {
      "jump": "o",
      "op": "JUMP"
    },
    "698": {
      "op": "JUMPDEST"
    },
    "699": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "701": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "703": {
      "op": "DUP3"
    },
    "704": {
      "op": "DUP5"
    },
    "705": {
      "op": "SUB"
    },
    "706": {
      "op": "SLT"
    },
    "707": {
      "op": "ISZERO"
    },
    "708": {
      "op": "PUSH2",
      "value": "0x2CC"
    },
    "711": {
      "op": "JUMPI"
    },
    "712": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "714": {
      "op": "DUP1"
    },
    "715": {
      "op": "REVERT"
    },
    "716": {
      "op": "JUMPDEST"
    },
    "717": {
      "op": "DUP2"
    },
    "718": {
      "op": "CALLDATALOAD"
    },
    "719": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "728": {
      "op": "DUP2"
    },
    "729": {
      "op": "GT"
    },
    "730": {
      "op": "ISZERO"
    },
    "731": {
      "op": "PUSH2",
      "value": "0x2E3"
    },
    "734": {
      "op": "JUMPI"
    },
    "735": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "737": {
      "op": "DUP1"
    },
    "738": {
      "op": "REVERT"
    },
    "739": {
      "op": "JUMPDEST"
    },
    "740": {
      "op": "PUSH2",
      "value": "0x2EF"
    },
    "743": {
      "op": "DUP5"
    },
    "744": {
      "op": "DUP3"
    },
    "745": {
      "op": "DUP6"
    },
    "746": {
      "op": "ADD"
    },
    "747": {
      "op": "PUSH2",
      "value": "0x22B"
    },
    "750": {
      "jump": "i",
      "op": "JUMP"
    },
    "751": {
      "op": "JUMPDEST"
    },
    "752": {
      "op": "SWAP5"
    },
    "753": {
      "op": "SWAP4"
    },
    "754": {
      "op": "POP"
    },
    "755": {
      "op": "POP"
    },
    "756": {
      "op": "POP"
    },
    "757": {
      "op": "POP"
    },
    "758": {
      "jump": "o",
      "op": "JUMP"
    },
    "759": {
      "op": "JUMPDEST"
    },
    "760": {
      "op": "DUP1"
    },
    "761": {
      "op": "CALLDATALOAD"
    },
    "762": {
      "op": "DUP1"
    },
    "763": {
      "op": "ISZERO"
    },
    "764": {
      "op": "ISZERO"
    },
    "765": {
      "op": "DUP2"
    },
    "766": {
      "op": "EQ"
    },
    "767": {
      "op": "PUSH2",
      "value": "0x307"
    },
    "770": {
      "op": "JUMPI"
    },
    "771": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "773": {
      "op": "DUP1"
    },
    "774": {
      "op": "REVERT"
    },
    "775": {
      "op": "JUMPDEST"
    },
    "776": {
      "op": "SWAP2"
    },
    "777": {
      "op": "SWAP1"
    },
    "778": {
      "op": "POP"
    },
    "779": {
      "jump": "o",
      "op": "JUMP"
    },
    "780": {
      "op": "JUMPDEST"
    },
    "781": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "783": {
      "op": "DUP1"
    },
    "784": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "786": {
      "op": "DUP1"
    },
    "787": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "789": {
      "op": "DUP6"
    },
    "790": {
      "op": "DUP8"
    },
    "791": {
      "op": "SUB"
    },
    "792": {
      "op": "SLT"
    },
    "793": {
      "op": "ISZERO"
    },
    "794": {
      "op": "PUSH2",
      "value": "0x322"
    },
    "797": {
      "op": "JUMPI"
    },
    "798": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "800": {
      "op": "DUP1"
    },
    "801": {
      "op": "REVERT"
    },
    "802": {
      "op": "JUMPDEST"
    },
    "803": {
      "op": "PUSH2",
      "value": "0x32B"
    },
    "806": {
      "op": "DUP6"
    },
    "807": {
      "op": "PUSH2",
      "value": "0x2F7"
    },
    "810": {
      "jump": "i",
      "op": "JUMP"
    },
    "811": {
      "op": "JUMPDEST"
    },
    "812": {
      "op": "SWAP4"
    },
    "813": {
      "op": "POP"
    },
    "814": {
      "op": "PUSH2",
      "value": "0x339"
    },
    "817": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "819": {
      "op": "DUP7"
    },
    "820": {
      "op": "ADD"
    },
    "821": {
      "op": "PUSH2",
      "value": "0x2F7"
    },
    "824": {
      "jump": "i",
      "op": "JUMP"
    },
    "825": {
      "op": "JUMPDEST"
    },
    "826": {
      "op": "SWAP3"
    },
    "827": {
      "op": "POP"
    },
    "828": {
      "op": "PUSH2",
      "value": "0x347"
    },
    "831": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "833": {
      "op": "DUP7"
    },
    "834": {
      "op": "ADD"
    },
    "835": {
      "op": "PUSH2",
      "value": "0x2F7"
    },
    "838": {
      "jump": "i",
      "op": "JUMP"
    },
    "839": {
      "op": "JUMPDEST"
    },
    "840": {
      "op": "SWAP2"
    },
    "841": {
      "op": "POP"
    },
    "842": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "844": {
      "op": "DUP6"
    },
    "845": {
      "op": "ADD"
    },
    "846": {
      "op": "CALLDATALOAD"
    },
    "847": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "856": {
      "op": "DUP2"
    },
    "857": {
      "op": "GT"
    },
    "858": {
      "op": "ISZERO"
    },
    "859": {
      "op": "PUSH2",
      "value": "0x363"
    },
    "862": {
      "op": "JUMPI"
    },
    "863": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "865": {
      "op": "DUP1"
    },
    "866": {
      "op": "REVERT"
    },
    "867": {
      "op": "JUMPDEST"
    },
    "868": {
      "op": "PUSH2",
      "value": "0x36F"
    },
    "871": {
      "op": "DUP8"
    },
    "872": {
      "op": "DUP3"
    },
    "873": {
      "op": "DUP9"
    },
    "874": {
      "op": "ADD"
    },
    "875": {
      "op": "PUSH2",
      "value": "0x22B"
    },
    "878": {
      "jump": "i",
      "op": "JUMP"
    },
    "879": {
      "op": "JUMPDEST"
    },
    "880": {
      "op": "SWAP2"
    },
    "881": {
      "op": "POP"
    },
    "882": {
      "op": "POP"
    },
    "883": {
      "op": "SWAP3"
    },
    "884": {
      "op": "SWAP6"
    },
    "885": {
      "op": "SWAP2"
    },
    "886": {
      "op": "SWAP5"
    },
    "887": {
      "op": "POP"
    },
    "888": {
      "op": "SWAP3"
    },
    "889": {
      "op": "POP"
    },
    "890": {
      "jump": "o",
      "op": "JUMP"
    },
    "891": {
      "op": "JUMPDEST"
    },
    "892": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "894": {
      "op": "DUP2"
    },
    "895": {
      "op": "MLOAD"
    },
    "896": {
      "op": "DUP1"
    },
    "897": {
      "op": "DUP5"
    },
    "898": {
      "op": "MSTORE"
    },
    "899": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "901": {
      "op": "JUMPDEST"
    },
    "902": {
      "op": "DUP2"
    },
    "903": {
      "op": "DUP2"
    },
    "904": {
      "op": "LT"
    },
    "905": {
      "op": "ISZERO"
    },
    "906": {
      "op": "PUSH2",
      "value": "0x3A1"
    },
    "909": {
      "op": "JUMPI"
    },
    "910": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "912": {
      "op": "DUP2"
    },
    "913": {
      "op": "DUP6"
    },
    "914": {
      "op": "ADD"
    },
    "915": {
      "op": "DUP2"
    },
    "916": {
      "op": "ADD"
    },
    "917": {
      "op": "MLOAD"
    },
    "918": {
      "op": "DUP7"
    },
    "919": {
      "op": "DUP4"
    },
    "920": {
      "op": "ADD"
    },
    "921": {
      "op": "DUP3"
    },
    "922": {
      "op": "ADD"
    },
    "923": {
      "op": "MSTORE"
    },
    "924": {
      "op": "ADD"
    },
    "925": {
      "op": "PUSH2",
      "value": "0x385"
    },
    "928": {
      "op": "JUMP"
    },
    "929": {
      "op": "JUMPDEST"
    },
    "930": {
      "op": "POP"
    },
    "931": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "933": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "935": {
      "op": "DUP3"
    },
    "936": {
      "op": "DUP7"
    },
    "937": {
      "op": "ADD"
    },
    "938": {
      "op": "ADD"
    },
    "939": {
      "op": "MSTORE"
    },
    "940": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "942": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "944": {
      "op": "NOT"
    },
    "945": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "947": {
      "op": "DUP4"
    },
    "948": {
      "op": "ADD"
    },
    "949": {
      "op": "AND"
    },
    "950": {
      "op": "DUP6"
    },
    "951": {
      "op": "ADD"
    },
    "952": {
      "op": "ADD"
    },
    "953": {
      "op": "SWAP2"
    },
    "954": {
      "op": "POP"
    },
    "955": {
      "op": "POP"
    },
    "956": {
      "op": "SWAP3"
    },
    "957": {
      "op": "SWAP2"
    },
    "958": {
      "op": "POP"
    },
    "959": {
      "op": "POP"
    },
    "960": {
      "jump": "o",
      "op": "JUMP"
    },
    "961": {
      "op": "JUMPDEST"
    },
    "962": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "964": {
      "op": "DUP2"
    },
    "965": {
      "op": "MSTORE"
    },
    "966": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "968": {
      "op": "PUSH2",
      "value": "0x3D4"
    },
    "971": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "973": {
      "op": "DUP4"
    },
    "974": {
      "op": "ADD"
    },
    "975": {
      "op": "DUP6"
    },
    "976": {
      "op": "PUSH2",
      "value": "0x37B"
    },
    "979": {
      "jump": "i",
      "op": "JUMP"
    },
    "980": {
      "op": "JUMPDEST"
    },
    "981": {
      "op": "DUP3"
    },
    "982": {
      "op": "DUP2"
    },
    "983": {
      "op": "SUB"
    },
    "984": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "986": {
      "op": "DUP5"
    },
    "987": {
      "op": "ADD"
    },
    "988": {
      "op": "MSTORE"
    },
    "989": {
      "op": "PUSH1",
      "value": "0xD"
    },
    "991": {
      "op": "DUP2"
    },
    "992": {
      "op": "MSTORE"
    },
    "993": {
      "op": "PUSH13",
      "value": "0x6164645F646961676E6F736973"
    },
    "1007": {
      "op": "PUSH1",
      "value": "0x98"
    },
    "1009": {
      "op": "SHL"
    },
    "1010": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1012": {
      "op": "DUP3"
    },
    "1013": {
      "op": "ADD"
    },
    "1014": {
      "op": "MSTORE"
    },
    "1015": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1017": {
      "op": "DUP2"
    },
    "1018": {
      "op": "ADD"
    },
    "1019": {
      "op": "SWAP2"
    },
    "1020": {
      "op": "POP"
    },
    "1021": {
      "op": "POP"
    },
    "1022": {
      "op": "DUP3"
    },
    "1023": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1025": {
      "op": "DUP4"
    },
    "1026": {
      "op": "ADD"
    },
    "1027": {
      "op": "MSTORE"
    },
    "1028": {
      "op": "SWAP4"
    },
    "1029": {
      "op": "SWAP3"
    },
    "1030": {
      "op": "POP"
    },
    "1031": {
      "op": "POP"
    },
    "1032": {
      "op": "POP"
    },
    "1033": {
      "jump": "o",
      "op": "JUMP"
    },
    "1034": {
      "op": "JUMPDEST"
    },
    "1035": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "1037": {
      "op": "DUP2"
    },
    "1038": {
      "op": "MSTORE"
    },
    "1039": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1041": {
      "op": "PUSH2",
      "value": "0x41D"
    },
    "1044": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "1046": {
      "op": "DUP4"
    },
    "1047": {
      "op": "ADD"
    },
    "1048": {
      "op": "DUP7"
    },
    "1049": {
      "op": "PUSH2",
      "value": "0x37B"
    },
    "1052": {
      "jump": "i",
      "op": "JUMP"
    },
    "1053": {
      "op": "JUMPDEST"
    },
    "1054": {
      "op": "DUP3"
    },
    "1055": {
      "op": "DUP2"
    },
    "1056": {
      "op": "SUB"
    },
    "1057": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1059": {
      "op": "DUP5"
    },
    "1060": {
      "op": "ADD"
    },
    "1061": {
      "op": "MSTORE"
    },
    "1062": {
      "op": "PUSH1",
      "value": "0xE"
    },
    "1064": {
      "op": "DUP2"
    },
    "1065": {
      "op": "MSTORE"
    },
    "1066": {
      "op": "PUSH14",
      "value": "0x7375626D69745F73796D70746F6D"
    },
    "1081": {
      "op": "PUSH1",
      "value": "0x90"
    },
    "1083": {
      "op": "SHL"
    },
    "1084": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1086": {
      "op": "DUP3"
    },
    "1087": {
      "op": "ADD"
    },
    "1088": {
      "op": "MSTORE"
    },
    "1089": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1091": {
      "op": "DUP2"
    },
    "1092": {
      "op": "ADD"
    },
    "1093": {
      "op": "SWAP2"
    },
    "1094": {
      "op": "POP"
    },
    "1095": {
      "op": "POP"
    },
    "1096": {
      "op": "DUP4"
    },
    "1097": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1099": {
      "op": "DUP4"
    },
    "1100": {
      "op": "ADD"
    },
    "1101": {
      "op": "MSTORE"
    },
    "1102": {
      "op": "DUP3"
    },
    "1103": {
      "op": "SLOAD"
    },
    "1104": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1106": {
      "op": "DUP2"
    },
    "1107": {
      "op": "AND"
    },
    "1108": {
      "op": "ISZERO"
    },
    "1109": {
      "op": "ISZERO"
    },
    "1110": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1112": {
      "op": "DUP5"
    },
    "1113": {
      "op": "ADD"
    },
    "1114": {
      "op": "MSTORE"
    },
    "1115": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1117": {
      "op": "DUP2"
    },
    "1118": {
      "op": "PUSH1",
      "value": "0x8"
    },
    "1120": {
      "op": "SHR"
    },
    "1121": {
      "op": "AND"
    },
    "1122": {
      "op": "ISZERO"
    },
    "1123": {
      "op": "ISZERO"
    },
    "1124": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1126": {
      "op": "DUP5"
    },
    "1127": {
      "op": "ADD"
    },
    "1128": {
      "op": "MSTORE"
    },
    "1129": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1131": {
      "op": "DUP2"
    },
    "1132": {
      "op": "PUSH1",
      "value": "0x10"
    },
    "1134": {
      "op": "SHR"
    },
    "1135": {
      "op": "AND"
    },
    "1136": {
      "op": "ISZERO"
    },
    "1137": {
      "op": "ISZERO"
    },
    "1138": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1140": {
      "op": "DUP5"
    },
    "1141": {
      "op": "ADD"
    },
    "1142": {
      "op": "MSTORE"
    },
    "1143": {
      "op": "POP"
    },
    "1144": {
      "op": "SWAP5"
    },
    "1145": {
      "op": "SWAP4"
    },
    "1146": {
      "op": "POP"
    },
    "1147": {
      "op": "POP"
    },
    "1148": {
      "op": "POP"
    },
    "1149": {
      "op": "POP"
    },
    "1150": {
      "jump": "o",
      "op": "JUMP"
    },
    "1151": {
      "op": "JUMPDEST"
    },
    "1152": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1154": {
      "op": "DUP2"
    },
    "1155": {
      "op": "MSTORE"
    },
    "1156": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1158": {
      "op": "PUSH2",
      "value": "0x492"
    },
    "1161": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1163": {
      "op": "DUP4"
    },
    "1164": {
      "op": "ADD"
    },
    "1165": {
      "op": "DUP6"
    },
    "1166": {
      "op": "PUSH2",
      "value": "0x37B"
    },
    "1169": {
      "jump": "i",
      "op": "JUMP"
    },
    "1170": {
      "op": "JUMPDEST"
    },
    "1171": {
      "op": "DUP3"
    },
    "1172": {
      "op": "DUP2"
    },
    "1173": {
      "op": "SUB"
    },
    "1174": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1176": {
      "op": "DUP5"
    },
    "1177": {
      "op": "ADD"
    },
    "1178": {
      "op": "MSTORE"
    },
    "1179": {
      "op": "PUSH1",
      "value": "0x13"
    },
    "1181": {
      "op": "DUP2"
    },
    "1182": {
      "op": "MSTORE"
    },
    "1183": {
      "op": "PUSH19",
      "value": "0x7570646174655F746573745F726573756C7473"
    },
    "1203": {
      "op": "PUSH1",
      "value": "0x68"
    },
    "1205": {
      "op": "SHL"
    },
    "1206": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1208": {
      "op": "DUP3"
    },
    "1209": {
      "op": "ADD"
    },
    "1210": {
      "op": "MSTORE"
    },
    "1211": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1213": {
      "op": "DUP2"
    },
    "1214": {
      "op": "ADD"
    },
    "1215": {
      "op": "SWAP2"
    },
    "1216": {
      "op": "POP"
    },
    "1217": {
      "op": "POP"
    },
    "1218": {
      "op": "DUP3"
    },
    "1219": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1221": {
      "op": "DUP4"
    },
    "1222": {
      "op": "ADD"
    },
    "1223": {
      "op": "MSTORE"
    },
    "1224": {
      "op": "SWAP4"
    },
    "1225": {
      "op": "SWAP3"
    },
    "1226": {
      "op": "POP"
    },
    "1227": {
      "op": "POP"
    },
    "1228": {
      "op": "POP"
    },
    "1229": {
      "jump": "o",
      "op": "JUMP"
    },
    "1230": {
      "op": "JUMPDEST"
    },
    "1231": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1233": {
      "op": "DUP2"
    },
    "1234": {
      "op": "MSTORE"
    },
    "1235": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1237": {
      "op": "PUSH2",
      "value": "0x4E1"
    },
    "1240": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1242": {
      "op": "DUP4"
    },
    "1243": {
      "op": "ADD"
    },
    "1244": {
      "op": "DUP6"
    },
    "1245": {
      "op": "PUSH2",
      "value": "0x37B"
    },
    "1248": {
      "jump": "i",
      "op": "JUMP"
    },
    "1249": {
      "op": "JUMPDEST"
    },
    "1250": {
      "op": "DUP3"
    },
    "1251": {
      "op": "DUP2"
    },
    "1252": {
      "op": "SUB"
    },
    "1253": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1255": {
      "op": "DUP5"
    },
    "1256": {
      "op": "ADD"
    },
    "1257": {
      "op": "MSTORE"
    },
    "1258": {
      "op": "PUSH1",
      "value": "0xF"
    },
    "1260": {
      "op": "DUP2"
    },
    "1261": {
      "op": "MSTORE"
    },
    "1262": {
      "op": "PUSH15",
      "value": "0x3932B332B92FBA37AFB237B1BA37B9"
    },
    "1278": {
      "op": "PUSH1",
      "value": "0x89"
    },
    "1280": {
      "op": "SHL"
    },
    "1281": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1283": {
      "op": "DUP3"
    },
    "1284": {
      "op": "ADD"
    },
    "1285": {
      "op": "MSTORE"
    },
    "1286": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1288": {
      "op": "DUP2"
    },
    "1289": {
      "op": "ADD"
    },
    "1290": {
      "op": "SWAP2"
    },
    "1291": {
      "op": "POP"
    },
    "1292": {
      "op": "POP"
    },
    "1293": {
      "op": "DUP3"
    },
    "1294": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1296": {
      "op": "DUP4"
    },
    "1297": {
      "op": "ADD"
    },
    "1298": {
      "op": "MSTORE"
    },
    "1299": {
      "op": "SWAP4"
    },
    "1300": {
      "op": "SWAP3"
    },
    "1301": {
      "op": "POP"
    },
    "1302": {
      "op": "POP"
    },
    "1303": {
      "op": "POP"
    },
    "1304": {
      "jump": "o",
      "op": "JUMP"
    },
    "1305": {
      "op": "JUMPDEST"
    },
    "1306": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1308": {
      "op": "DUP2"
    },
    "1309": {
      "op": "MSTORE"
    },
    "1310": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1312": {
      "op": "PUSH2",
      "value": "0x52C"
    },
    "1315": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1317": {
      "op": "DUP4"
    },
    "1318": {
      "op": "ADD"
    },
    "1319": {
      "op": "DUP6"
    },
    "1320": {
      "op": "PUSH2",
      "value": "0x37B"
    },
    "1323": {
      "jump": "i",
      "op": "JUMP"
    },
    "1324": {
      "op": "JUMPDEST"
    },
    "1325": {
      "op": "DUP3"
    },
    "1326": {
      "op": "DUP2"
    },
    "1327": {
      "op": "SUB"
    },
    "1328": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1330": {
      "op": "DUP5"
    },
    "1331": {
      "op": "ADD"
    },
    "1332": {
      "op": "MSTORE"
    },
    "1333": {
      "op": "PUSH1",
      "value": "0xB"
    },
    "1335": {
      "op": "DUP2"
    },
    "1336": {
      "op": "MSTORE"
    },
    "1337": {
      "op": "PUSH11",
      "value": "0x185CDCDA59DB97DD195CDD"
    },
    "1349": {
      "op": "PUSH1",
      "value": "0xAA"
    },
    "1351": {
      "op": "SHL"
    },
    "1352": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1354": {
      "op": "DUP3"
    },
    "1355": {
      "op": "ADD"
    },
    "1356": {
      "op": "MSTORE"
    },
    "1357": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1359": {
      "op": "DUP2"
    },
    "1360": {
      "op": "ADD"
    },
    "1361": {
      "op": "SWAP2"
    },
    "1362": {
      "op": "POP"
    },
    "1363": {
      "op": "POP"
    },
    "1364": {
      "op": "DUP3"
    },
    "1365": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1367": {
      "op": "DUP4"
    },
    "1368": {
      "op": "ADD"
    },
    "1369": {
      "op": "MSTORE"
    },
    "1370": {
      "op": "SWAP4"
    },
    "1371": {
      "op": "SWAP3"
    },
    "1372": {
      "op": "POP"
    },
    "1373": {
      "op": "POP"
    },
    "1374": {
      "op": "POP"
    },
    "1375": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "1e3372623ce46ec3100da8cec203f435146e691c",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract LogAudits {\n    // Define the struct for consent information\n    struct Consent {\n        bool treatment;\n        bool referral;\n        bool research;\n    }\n\n    // Mapping to store consent data for each user (address)\n    mapping(address => Consent) private userConsent;\n    // Mapping to store authorized addresses (providers can be doctors, lab staff, etc.)\n    mapping(address => bool) private authorizedProviders;\n\n    // Define the structure of the event\n    event PatientLogged(\n        address indexed user,            // The user performing the action\n        string role,                     // Role of the user (e.g., patient, doctor, lab staff)\n        string action_type,              // The type of action (e.g., submit_symptom, add_diagnosis)\n        uint256 created_at,              // Timestamp of the action\n        Consent granted_consent          // Consent for the action (only used in submit_symptom)\n    );\n\n    event ActionLogged(\n        address indexed user,            // The user performing the action\n        string role,                     // Role of the user (e.g., patient, doctor, lab staff)\n        string action_type,              // The type of action (e.g., submit_symptom, add_diagnosis)\n        uint256 created_at\n    );\n\n\n    // Function to submit a symptom with consent (only for patients)\n    function submitSymptom(\n        bool _treatmentConsent,\n        bool _referralConsent,\n        bool _researchConsent,\n        string memory _role\n    ) public {\n        // Store the consent information in the mapping\n        userConsent[msg.sender] = Consent({\n            treatment: _treatmentConsent,\n            referral: _referralConsent,\n            research: _researchConsent\n        });\n\n        // Emit the event logging the action and consent\n        emit PatientLogged(\n            msg.sender,\n            _role,                          // Role passed as a parameter\n            \"submit_symptom\",               // Action type: submit_symptom\n            block.timestamp,                // Timestamp of the action\n            userConsent[msg.sender]         // The consent granted\n        );\n    }\n\n    // Function for a doctor to add a diagnosis (requires a valid doctor role)\n    function addDiagnosis(string memory _role) public {\n        emit ActionLogged(\n            msg.sender, \n            _role, \n            \"add_diagnosis\", \n            block.timestamp\n            );\n    }\n\n    // Function for referring a patient to another doctor (requires a valid doctor role)\n    function referToDoctor(string memory _role) public {\n        emit ActionLogged(\n            msg.sender,\n            _role, \n            \"refer_to_doctor\", \n            block.timestamp);\n    }\n\n    // Function for assigning a test to the lab (requires a valid doctor role)\n    function assignTest(string memory _role) public {\n        emit ActionLogged(\n            msg.sender, \n            _role, \n            \"assign_test\", \n            block.timestamp);\n    }\n\n    // Function for lab staff to update test results (requires a valid lab staff role)\n    function updateTestResults(string memory _role) public {\n        emit ActionLogged(\n            msg.sender, \n            _role, \n            \"update_test_results\", \n            block.timestamp);\n    }\n}\n",
  "sourceMap": "57:3291:0:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/LogAudits.sol",
  "type": "contract"
}